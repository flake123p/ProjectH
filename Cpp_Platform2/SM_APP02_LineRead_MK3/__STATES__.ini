;
; for SMM MK3
;
[STATE_EVENT_TABLE]
<SE_TABLE>
	S\E					OpenFile		ReadLine			Exit
	-----------------------------------------------------------------
	S,Init				D,iFile_Opening	R,iFile_Opening		D,Exit
	
	I,iFile_Opening
	S,File_Open_OK		N				D,iLine_Reading		D,Exit
	S,File_Open_NG		N				N					D,Exit
	
	I,iLine_Reading
	S,Line_Read_OK		N				D,iLine_Reading		D,Exit
	S,Line_Read_LAST	N				N					D,Exit
	S,Line_Read_NG		N				N					D,Exit
	S,Line_Read_EOF		N				N					D,Exit
	
	S,Exit				N
</SE_TABLE>

;	Mapping next state to following external enum
<INTER_STATE>
	iFile_Opening {
		File_Open_OK	LRM_FileOpen_OK
		File_Open_NG	LRM_FileOpen_NG
	}
	iLine_Reading {
		Line_Read_OK	LRM_LineRead_OK
		Line_Read_LAST	LRM_LineRead_LAST
		Line_Read_NG	LRM_LineRead_NG
		Line_Read_EOF	LRM_LineRead_EOF
	}
</INTER_STATE>

;	[state]			[entry_func] 	[leave_func]  (with old/new states!)
<STATE_FUNC>
	Init			NULL			NULL
	iFile_Opening	LRM_FileOpen	NULL
	File_Open_OK	DEFAULT			DEFAULT
	File_Open_NG	DEFAULT			DEFAULT
	iLine_Reading	LRM_LineRead	DEFAULT
	Line_Read_OK	DEFAULT			DEFAULT
	Line_Read_LAST
	Line_Read_NG	DEFAULT			DEFAULT
	Line_Read_EOF	DEFAULT			DEFAULT
	Exit			LRM_FileClose
</STATE_FUNC>

<GLOBAL_EVENT>
	TestGEvent_1
	TestGEvent_2	DEFAULT
	SetInputFile	LRM_SetInputFile
	GetLineObj		LRM_GetLineObj
</GLOBAL_EVENT>

<EVENT_PARA>
	std::string inputFileName;
	LibFileIoClass *lineObj;
</EVENT_PARA>

;	[event]			[next_state] 	[opt./input_file]	[opt./output_file]	[opt./compare_file]
<TEST_CASE>
	SetInputFile	Init			test/t1_in.txt
	GetLineObj		Init
	ReadLine		Line_Read_OK	NULL				test/t11_out.txt	test/t11_cmp.txt
	ReadLine		Line_Read_OK	NULL				test/t12_out.txt	test/t11_cmp.txt
	ReadLine		Line_Read_LAST	NULL				test/t13_out.txt	test/t11_cmp.txt
	ReadLine		Line_Read_EOF	NULL
</TEST_CASE>

[ATTR]
Out_File_Header_C	= "LineReadMachine.hpp"
Out_File_Source_C	= "LineReadMachine.cpp"	// [XXX].cpp, [XXX]_Function.cpp, [XXX]_TestCase.cpp
State_Name			= "Lrm"					// 1:SFS_TEST_t, 2:gSFS_Test, 3:SFS_Test_StateMachine()
State_Prefix		= "LRM_"				// For state enum
State_Prefix_Sx		= 1						// For state enum, S0_  S1_  S2_  ...
Event_Name			= "LRM_EVT"				// For event typedef
Event_Prefix		= "LRM_EVT_"			// For event enum
Event_Prefix_Ex		= 1						// For event enum

AVOID_REDEFINE_TYPE	= BEFORE				// BEFORE or AFTER

[INCLUDE]
<INCLUDE_FRONT>
#include "Everything_App.hpp"
</INCLUDE_FRONT>
<INCLUDE_BACK>
#include "LRM.hpp"
</INCLUDE_BACK>

[ASSERT]
<ASSERT>
BASIC_ASSERT(0);
</ASSERT>